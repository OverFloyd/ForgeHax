buildscript {
  ext {
    forgehaxCommit = { ->
      def out = new ByteArrayOutputStream()
      exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput out
      }
      return out.toString().trim()
    }.call()

    forgehaxVersion = "3.2.0-${forgehaxCommit}"

    minecraftVersion = '1.16.4'
    forgeVersion = '35.0.7'

    fmlVersion = '2.0.0-milestone.1'
    lombokVersion = '1.18.12'

    mcpVersion = '1.16.3'
    mcpChannel = 'snapshot'
    mcpMapping = '20201028'
  }
  repositories {
    mavenCentral()
    maven { url "http://files.minecraftforge.net/maven" }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}

repositories {
  mavenCentral()
  maven { url "https://oss.sonatype.org/content/groups/public/" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'dev.fiki.forgehax.mapper'

group 'dev.fiki.forgehax'
version forgehaxVersion

archivesBaseName = "ForgeHax-${minecraftVersion}"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

final isJenkinsBuilding = System.getProperty("jenkins") != null

sourceSets {
  api {
    compileClasspath += main.compileClasspath
  }

  main {
    if (isJenkinsBuilding) {
      java {
        exclude 'dev/fiki/forgehax/main/mods/ForgeModListSpoofer.java'
      }
    }
    compileClasspath += api.output
  }
}

minecraft {
  mappings channel: mcpChannel, version: mcpChannel == 'official' ? mcpVersion : "${mcpMapping}-${mcpVersion}"

  runs {
    client {
      workingDirectory project.file('run')

//      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
      property 'forge.logging.console.level', 'debug'
      property 'forgehax.logging.level', 'debug'

      mods {
        ForgeHax {
          sources sourceSets.main
        }
      }
    }
  }
}

mapper {
  annotatedWith 'dev/fiki/forgehax/main/util/modloader/RegisterMod'

  include sourceSets.main
}

dependencies {
  // forge provides us the wrong version, might need to remove this eventually
  implementation group: 'org.ow2.asm', name: 'asm-util', version: '7.2'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.15.0'
}

compileJava {
  // this will allow use to read a constructors parameter names at runtime
  options.compilerArgs << '-parameters'
}

jar {
  manifest {
    attributes([
        "Specification-Title"     : "ForgeHax",
        "Specification-Vendor"    : "nhackindustries",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "nhackindustries",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

processResources {
  filesMatching('**/config.properties') {
    //noinspection UnnecessaryQualifiedReference
    it.filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        "forgehax.version"      : forgehaxVersion.toString(),
        "forgehax.mc.version"   : minecraftVersion.toString(),
        "forgehax.forge.version": forgeVersion.toString(),
        "forgehax.mcp.version"  : mcpVersion.toString(),
        "forgehax.mcp.channel"  : mcpChannel.toString(),
        "forgehax.mcp.mapping"  : mcpMapping.toString()
    ]
  }
}

task setGameDir() {
  // Check if custom gamedir has been passed, if not use default ones per platform
  if (!project.hasProperty("gameDir")) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      project.ext.gameDir = System.getenv("APPDATA") + "/.minecraft"
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
      project.ext.gameDir = System.properties["user.home"] + "/Library/Application Support/minecraft"
    } else {
      project.ext.gameDir = System.properties["user.home"] + "/.minecraft"
    }
  }
}

task copyJar(type: DefaultTask, dependsOn: [setGameDir]) {
  if(file(project.ext.gameDir).exists()) {
    final files = { directory, filter, closure ->
      new File(directory).eachFileMatch(filter, closure)
    }

    doLast {
      final mods = "${project.ext.gameDir}/mods"

      project.copy {
        // delete previous ForgeHax jars
        files(mods, ~/ForgeHax-.*\.jar/) { file ->
          file.delete()
        }

        from project.jar
        into mods
      }
    }
  }
}

if (!isJenkinsBuilding) {
  // run this task after build
  build.finalizedBy copyJar
}
