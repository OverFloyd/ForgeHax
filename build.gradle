buildscript {
  repositories {
    mavenCentral()
    maven { url "http://files.minecraftforge.net/maven" }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}

ext {
  forgehaxCommit = { ->
    try {
      def out = new ByteArrayOutputStream()
      exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput out
      }
      return out.toString().trim()
    } catch (Throwable t) {
      String commit = System.getenv('GIT_COMMIT')
      if (commit == null) {
        logger.warn('Unable to obtain the latest git commit hash.')
        return 'latest'
      }
      return commit
    }
  }.call()

  forgehaxVersion = "3.3.0-${forgehaxCommit}"

  minecraftVersion = '1.16.5'
  forgeVersion = '36.0.13'

  fmlVersion = '2.0.0-milestone.1'
  lombokVersion = '1.18.16'

  mcpVersion = '1.16.3'
  mcpChannel = 'snapshot'
  mcpMapping = '20201028'
}

repositories {
  mavenCentral()
  maven { url "https://oss.sonatype.org/content/groups/public/" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'dev.fiki.forgehax.mapper'

group 'dev.fiki.forgehax'
version forgehaxVersion

archivesBaseName = "ForgeHax-${minecraftVersion}"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

final isJenkinsBuilding = 'yes' == System.getenv("JENKINS_BUILDING")

if (isJenkinsBuilding) {
  logger.warn 'Jenkins detected. Certain modules will be omitted from this build'
}

sourceSets {
  api {
    compileClasspath += main.compileClasspath
  }

  main {
    if (isJenkinsBuilding) {
      java {
        exclude 'dev/fiki/forgehax/main/mods/ForgeModListSpoofer.java'
      }
    }
    compileClasspath += api.output
  }
}

minecraft {
  mappings channel: mcpChannel, version: mcpChannel == 'official' ? mcpVersion : "${mcpMapping}-${mcpVersion}"

  runs {
    client {
      workingDirectory project.file('run')

      property 'forge.logging.console.level', 'info'
      property 'forgehax.logging.level', 'debug'

      mods {
        ForgeHax {
          sources sourceSets.main
        }
      }
    }
  }
}

mapper {
  include sourceSets.main, sourceSets.test
}

dependencies {
  // forge provides us the wrong version, might need to remove this eventually
  implementation group: 'org.ow2.asm', name: 'asm-util', version: '7.2'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.18.1'
}

compileJava {
  // this will allow use to read a constructors parameter names at runtime
  options.compilerArgs << '-parameters'
}

test {
  useJUnitPlatform()
}

jar {
  manifest {
    attributes([
        "Specification-Title"     : "ForgeHax",
        "Specification-Vendor"    : "nhackindustries",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "nhackindustries",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

processResources {
  from 'logo.png'

  filesMatching('**/config.properties') {
    //noinspection UnnecessaryQualifiedReference
    it.filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        "forgehax.version"      : forgehaxVersion.toString(),
        "forgehax.mc.version"   : minecraftVersion.toString(),
        "forgehax.forge.version": forgeVersion.toString(),
        "forgehax.mcp.version"  : mcpVersion.toString(),
        "forgehax.mcp.channel"  : mcpChannel.toString(),
        "forgehax.mcp.mapping"  : mcpMapping.toString()
    ]
  }

  filesMatching('**/mods.toml') {
    final getMajorVersion = { version ->
      final pattern = /^(?<major>[0-9]+)\.(?<minor>[0-9]+)\.(?<patch>[0-9]+)$/
      final res = forgeVersion =~ pattern
      if (res.find()) {
        return "[${res.group('major')},)" as String
      } else {
        throw new Error("'$version' is not valid semantic versioning!")
      }
    }

    final getContributors = { api ->
      try {
        final url = new URL(api)
        final json = new groovy.json.JsonSlurper().parseText(url.text)
        return String.join(', ', json.collect { it.login })
      } catch (Throwable t) {
        logger.warn("Failed to get contributors from GitHub API! Defaulting to hardcoded users...")
        logger.debug(t.getMessage(), t)
        return 'fr1kin, BabbaJ, 0x22'
      }
    }

    //noinspection UnnecessaryQualifiedReference
    it.filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        'forgehax.version'      : project.version as String,
        'forgehax.forge.version': getMajorVersion.call(forgeVersion),
        'forgehax.issue.tracker': 'https://github.com/fr1kin/ForgeHax/issues',
        'forgehax.update.url'   : 'TODO',
        'forgehax.url'          : 'fiki.dev',
        'forgehax.logo.file'    : 'logo.png',
        'forgehax.credits'      : 'Rain#4705 for the logo',
        'forgehax.authors'      : getContributors.call('https://api.github.com/repos/fr1kin/ForgeHax/contributors'),
        'forgehax.description'  : 'Hax 4 Forge'
    ]
  }
}

task setGameDir() {
  // Check if custom gamedir has been passed, if not use default ones per platform
  if (!project.hasProperty("gameDir")) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
      project.ext.gameDir = System.getenv("APPDATA") + "/.minecraft"
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
      project.ext.gameDir = System.properties["user.home"] + "/Library/Application Support/minecraft"
    } else {
      project.ext.gameDir = System.properties["user.home"] + "/.minecraft"
    }
  }
}

task copyJar(type: DefaultTask, dependsOn: [setGameDir]) {
  if (file(project.ext.gameDir).exists()) {
    final files = { directory, filter, closure ->
      new File(directory).eachFileMatch(filter, closure)
    }

    doLast {
      final mods = "${project.ext.gameDir}/mods"

      project.copy {
        // delete previous ForgeHax jars
        files(mods, ~/ForgeHax-.*\.jar/) { file ->
          file.delete()
        }

        from project.jar
        into mods
      }
    }
  }
}

build.finalizedBy copyJar
